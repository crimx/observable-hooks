(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{308:function(e,t,s){"use strict";s.r(t);var r=s(17),a=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"suspense"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#suspense"}},[e._v("#")]),e._v(" Suspense")]),e._v(" "),t("p",[e._v("A concurrent mode safe way to use RxJS with React Suspense. See "),t("RouterLink",{attrs:{to:"/guide/render-as-you-fetch-suspense.html"}},[e._v("Render-as-You-Fetch (using Suspense)")]),e._v(" for usage.")],1),e._v(" "),t("h2",{attrs:{id:"observableresource"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#observableresource"}},[e._v("#")]),e._v(" ObservableResource")]),e._v(" "),t("div",{staticClass:"language-typescript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[e._v("Class ObservableResource"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("TInput"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" TOutput"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),t("p",[e._v("Rewires Observable to Relay-like Suspense resource.")]),e._v(" "),t("Badge",{attrs:{text:"v2.2.0"}}),e._v(" Added since v2.2.0.\n"),t("p",[t("strong",[e._v("Type parameters:")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("TInput")]),e._v(" Value type of the input Observable.")]),e._v(" "),t("li",[t("code",[e._v("TOutput")]),e._v(" Resulted resource value. Default TInput.")])]),e._v(" "),t("p",[t("strong",[e._v("Constructors:")])]),e._v(" "),t("div",{staticClass:"language-typescript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ObservableResource")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n  input$"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Observable"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("TInput"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  isSuccess"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("value"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" TInput"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" value "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("is")]),e._v(" TOutput\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" ObservableResource\n")])])]),t("p",[t("strong",[e._v("Parameters:")])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Name")]),e._v(" "),t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("code",[e._v("input$")])]),e._v(" "),t("td",[t("code",[e._v("Observable<TInput>")])]),e._v(" "),t("td",[e._v("An Observable.")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("isSuccess")])]),e._v(" "),t("td",[t("code",[e._v("(value: TInput): value is TOutput")])]),e._v(" "),t("td",[e._v("Optional function that determines if the value emitted from "),t("code",[e._v("input$")]),e._v(" is of success state. If false a Suspense is triggered. Default all true.")])])])]),e._v(" "),t("p",[t("strong",[e._v("Public Properties:")])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Name")]),e._v(" "),t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("code",[e._v("shouldUpdate$$")])]),e._v(" "),t("td",[t("code",[e._v("Subject<undefined>")])]),e._v(" "),t("td",[e._v("Emit when the Component needs extra rerendering.")])])])]),e._v(" "),t("p",[t("strong",[e._v("Public Methods:")])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Name")]),e._v(" "),t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("code",[e._v("read")])]),e._v(" "),t("td",[t("code",[e._v("(): TOutput")])]),e._v(" "),t("td",[e._v("Return cached value on success state. Throw suspender on pending state. Throw error on error state.")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("destroy")])]),e._v(" "),t("td",[t("code",[e._v("(): void")])]),e._v(" "),t("td",[e._v("UnSubscribe input Observable.")])]),e._v(" "),t("tr",[t("td",[t("code",[e._v("reload")])]),e._v(" "),t("td",[t("code",[e._v("(newInput$?: Observable<TInput>): void")])]),e._v(" "),t("td",[t("Badge",{attrs:{text:"v2.3.5"}}),e._v(" Clean up and resubscribe input Observable. For errored hot observable there is no way to resubscribe hence a "),t("code",[e._v("newInput$")]),e._v(" must be provided. Otherwise if omitted the original observable will be resubscribed. It is recommended to use cold observable if possible for easy reloading. (Also for those who are unfamiliar with observable temperature, even though a "),t("code",[e._v("Subject")]),e._v(" is hot, "),t("code",[e._v("subject.pipe(...)")]),e._v(" is cold.)")],1)])])]),e._v(" "),t("h2",{attrs:{id:"useobservablesuspense"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#useobservablesuspense"}},[e._v("#")]),e._v(" useObservableSuspense")]),e._v(" "),t("div",{staticClass:"language-typescript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-typescript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token generic-function"}},[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("useObservableSuspense")]),t("span",{pre:!0,attrs:{class:"token generic class-name"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("TInput"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" TOutput"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")])])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n  resource"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" ObservableResource"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("TInput"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" TOutput"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" TOutput\n")])])]),t("p",[e._v("Consume the Observable resource.")]),e._v(" "),t("Badge",{attrs:{text:"v2.2.0"}}),e._v(" Added since v2.2.0.\n"),t("p",[e._v("Unlike Promise, Observable implements multiple push protocol.\nThis hook triggers necessary re-rendering when Suspense should restart.")]),e._v(" "),t("p",[t("strong",[e._v("Type parameters:")])]),e._v(" "),t("ul",[t("li",[t("code",[e._v("TInput")]),e._v(" Value type of the input Observable.")]),e._v(" "),t("li",[t("code",[e._v("TOutput")]),e._v(" Resulted resource value. Default TInput.")])]),e._v(" "),t("p",[t("strong",[e._v("Parameters:")])]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("Name")]),e._v(" "),t("th",[e._v("Type")]),e._v(" "),t("th",[e._v("Description")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("code",[e._v("resource")])]),e._v(" "),t("td",[t("code",[e._v("ObservableResource<TInput, TOutput>")])]),e._v(" "),t("td",[e._v("Observable resource.")])])])]),e._v(" "),t("p",[t("strong",[e._v("Returns:")])]),e._v(" "),t("p",[t("code",[e._v("TOutput")]),e._v(" resource value.")])],1)}),[],!1,null,null,null);t.default=a.exports}}]);